{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// preparing a slice of global state\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // all the reducer this slide needs\n  reducers: {\n    // automatically recieve latest state\n    // dont need actions, atumatically called based on action\n    // dont need if statements\n    increment(state) {\n      // when using redux toolkit, it will automatically clone a state\n      // and return\n      // it is immutable code, automatically handled by redux toolkit\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      //state.counter = state.counter + action.amount\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// methods automatically generated by ToolKi, create action object for user\n// these objects with type property, and unique identifier per actions\ncounterSlice.actions.toggleCounter;\n\n// const reducerCounter = (state= initialState,action) => {\n\n//     if(action.type === \"increment\"){\n//         // redux would not merge your changes with existing state.\n//         // so therefore even we didnt update showCounter, we still need to update it\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     // alway return a brand new object\n\n//     if(action.type === \"increase\"){\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === \"decrement\"){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === \"toggle\"){\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state\n\n// }\n\n//const store = createStore(counterSlice.reducer)\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\n\n// do not subsribe\n// now connect to the React project\n\n// only one redux store, provide the store once \nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","actions","store","reducer","counterActions"],"sources":["/Users/jackylian/Downloads/React-Study/Redux/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux'\n\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\n\nconst initialState = {counter:0, showCounter:true}\n\n// preparing a slice of global state\nconst counterSlice = createSlice({\n    \n    name:'counter',\n    initialState, \n    // all the reducer this slide needs\n    reducers:{\n\n        // automatically recieve latest state\n        // dont need actions, atumatically called based on action\n        // dont need if statements\n        increment(state){\n            // when using redux toolkit, it will automatically clone a state\n            // and return\n            // it is immutable code, automatically handled by redux toolkit\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        increase(state, action){\n            //state.counter = state.counter + action.amount\n            state.counter = state.counter + action.payload\n\n        },\n        toggleCounter(state){\n            state.showCounter = !state.showCounter\n        },\n\n\n    }\n})\n\n// methods automatically generated by ToolKi, create action object for user\n// these objects with type property, and unique identifier per actions\ncounterSlice.actions.toggleCounter\n\n// const reducerCounter = (state= initialState,action) => {\n\n//     if(action.type === \"increment\"){\n//         // redux would not merge your changes with existing state.\n//         // so therefore even we didnt update showCounter, we still need to update it\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     // alway return a brand new object\n\n//     if(action.type === \"increase\"){\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === \"decrement\"){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === \"toggle\"){\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state\n\n// }\n\n//const store = createStore(counterSlice.reducer)\n\nconst store = configureStore({\n\n    reducer: counterSlice.reducer\n\n})\n\nexport const counterActions  = counterSlice.actions\n\n// do not subsribe\n// now connect to the React project\n\n// only one redux store, provide the store once \nexport default store\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AAEjC,SAAQC,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,WAAW,EAAC;AAAI,CAAC;;AAElD;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAE7BM,IAAI,EAAC,SAAS;EACdJ,YAAY;EACZ;EACAK,QAAQ,EAAC;IAEL;IACA;IACA;IACAC,SAASA,CAACC,KAAK,EAAC;MACZ;MACA;MACA;MACAA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnB;MACAH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAElD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EAGJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACAC,YAAY,CAACU,OAAO,CAACD,aAAa;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,MAAME,KAAK,GAAGf,cAAc,CAAC;EAEzBgB,OAAO,EAAEZ,YAAY,CAACY;AAE1B,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAIb,YAAY,CAACU,OAAO;;AAEnD;AACA;;AAEA;AACA,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}