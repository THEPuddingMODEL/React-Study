{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// preparing a slice of global state\ncreateSlice({\n  name: 'counter',\n  initialState,\n  // all the reducer this slide needs\n  reducers: {\n    // automatically recieve latest state\n    // dont need actions, atumatically called based on action\n    // dont need if statements\n    increment(state) {\n      // when using redux toolkit, it will automatically clone a state\n      // and return\n      // it is immutable code, automatically handled by redux toolkit\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter() {}\n  }\n});\nconst reducerCounter = (state = initialState, action) => {\n  if (action.type === \"increment\") {\n    // redux would not merge your changes with existing state.\n    // so therefore even we didnt update showCounter, we still need to update it\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  // alway return a brand new object\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state;\n};\nconst store = createStore(reducerCounter);\n\n// do not subsribe\n// now connect to the React project\n\n// only one redux store, provide the store once \nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","reducerCounter","type","store"],"sources":["/Users/jackylian/Downloads/React-Study/Redux/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux'\n\nimport {createSlice} from '@reduxjs/toolkit'\n\nconst initialState = {counter:0, showCounter:true}\n\n// preparing a slice of global state\ncreateSlice({\n    \n    name:'counter',\n    initialState, \n    // all the reducer this slide needs\n    reducers:{\n\n        // automatically recieve latest state\n        // dont need actions, atumatically called based on action\n        // dont need if statements\n        increment(state){\n            // when using redux toolkit, it will automatically clone a state\n            // and return\n            // it is immutable code, automatically handled by redux toolkit\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        increase(state, action){\n            state.counter = state.counter + action.amount\n        },\n        toggleCounter(){},\n\n\n    }\n})\n\nconst reducerCounter = (state= initialState,action) => {\n\n    if(action.type === \"increment\"){\n        // redux would not merge your changes with existing state.\n        // so therefore even we didnt update showCounter, we still need to update it\n        return {\n            counter: state.counter + 1,\n            showCounter: state.showCounter\n        }\n    }\n\n    // alway return a brand new object\n\n    if(action.type === \"increase\"){\n        return {\n            counter: state.counter + action.amount,\n            showCounter: state.showCounter\n        }\n    }\n\n    if(action.type === \"decrement\"){\n        return {\n            counter: state.counter - 1,\n            showCounter: state.showCounter\n        }\n    }\n\n    if(action.type === \"toggle\"){\n        return {\n            counter: state.counter,\n            showCounter: !state.showCounter\n        }\n    }\n\n    return state\n\n}\n\nconst store = createStore(reducerCounter)\n\n// do not subsribe\n// now connect to the React project\n\n// only one redux store, provide the store once \nexport default store\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AAEjC,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAC,CAAC;EAAEC,WAAW,EAAC;AAAI,CAAC;;AAElD;AACAH,WAAW,CAAC;EAERI,IAAI,EAAC,SAAS;EACdH,YAAY;EACZ;EACAI,QAAQ,EAAC;IAEL;IACA;IACA;IACAC,SAASA,CAACC,KAAK,EAAC;MACZ;MACA;MACA;MACAA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDM,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDO,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnBH,KAAK,CAACL,OAAO,GAAGK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACC,MAAM;IACjD,CAAC;IACDC,aAAaA,CAAA,EAAE,CAAC;EAGpB;AACJ,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAGA,CAACN,KAAK,GAAEN,YAAY,EAACS,MAAM,KAAK;EAEnD,IAAGA,MAAM,CAACI,IAAI,KAAK,WAAW,EAAC;IAC3B;IACA;IACA,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;;EAEA;;EAEA,IAAGO,MAAM,CAACI,IAAI,KAAK,UAAU,EAAC;IAC1B,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAGQ,MAAM,CAACC,MAAM;MACtCR,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;EAEA,IAAGO,MAAM,CAACI,IAAI,KAAK,WAAW,EAAC;IAC3B,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEI,KAAK,CAACJ;IACvB,CAAC;EACL;EAEA,IAAGO,MAAM,CAACI,IAAI,KAAK,QAAQ,EAAC;IACxB,OAAO;MACHZ,OAAO,EAAEK,KAAK,CAACL,OAAO;MACtBC,WAAW,EAAE,CAACI,KAAK,CAACJ;IACxB,CAAC;EACL;EAEA,OAAOI,KAAK;AAEhB,CAAC;AAED,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAc,CAAC;;AAEzC;AACA;;AAEA;AACA,eAAeE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}