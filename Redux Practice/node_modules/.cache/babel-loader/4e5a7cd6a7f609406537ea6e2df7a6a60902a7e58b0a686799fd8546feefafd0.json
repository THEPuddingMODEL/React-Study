{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialCartState,\n  reducers: {\n    // how to we know which one to increment?\n    // by index? Pass in index through action payload\n\n    // ation payload need be object\n    addToCart(state, action) {\n      // need to push action payload into the array\n\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      // we directly modified the array, this is strictly prohibited in Redux\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    // given id\n    removeItem(state, action) {}\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","initialCartState","items","totalQuantity","cartSlice","name","reducers","addToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItem","cartActions","actions"],"sources":["/Users/jackylian/Downloads/React-Study/Redux Practice/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = { items: [], totalQuantity: 0 };\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialCartState,\n  reducers: {\n    // how to we know which one to increment?\n    // by index? Pass in index through action payload\n\n    // ation payload need be object\n    addToCart(state, action) {\n      // need to push action payload into the array\n\n      const newItem = action.payload;\n\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      // we directly modified the array, this is strictly prohibited in Redux\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name:newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price\n      }\n    },\n\n    // given id\n    removeItem(state, action){\n        \n    }\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG;EAAEC,KAAK,EAAE,EAAE;EAAEC,aAAa,EAAE;AAAE,CAAC;AAExD,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MAAM;EACZJ,gBAAgB;EAChBK,QAAQ,EAAE;IACR;IACA;;IAEA;IACAC,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvB;;MAEA,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAE9B,MAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;;MAEvE;MACA,IAAI,CAACH,YAAY,EAAE;QACjBJ,KAAK,CAACN,KAAK,CAACc,IAAI,CAAC;UACfC,MAAM,EAAEP,OAAO,CAACK,EAAE;UAClBG,KAAK,EAAER,OAAO,CAACQ,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAEV,OAAO,CAACQ,KAAK;UACzBb,IAAI,EAACK,OAAO,CAACW;QACf,CAAC,CAAC;MACJ,CAAC,MAAM;QACLT,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGV,OAAO,CAACQ,KAAK;MACnE;IACF,CAAC;IAED;IACAI,UAAUA,CAACd,KAAK,EAAEC,MAAM,EAAC,CAEzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMc,WAAW,GAAGnB,SAAS,CAACoB,OAAO;AAE5C,eAAepB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}